{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"fact User Guide Info For more information on how this was built and deployed, as well as other Python best practices, see python-blueprint . Info This user guide is purely an illustrative example that shows off several features of MkDocs and included Markdown extensions. Installation First, create and activate a Python virtual environment: Linux/macOS Windows python3 -m venv venv source venv/bin/activate py -m venv venv venv \\ Scripts \\ activate Then install the fact package: pip install . Quick Start To use fact within your project, import the factorial function and execute it like: from fact.lib import factorial # (1) assert factorial ( 3 ) == 6 This assertion will be True Tip Within PyCharm, use Tab to auto-complete suggested imports while typing.","title":"`fact` User Guide"},{"location":"index.html#fact-user-guide","text":"Info For more information on how this was built and deployed, as well as other Python best practices, see python-blueprint . Info This user guide is purely an illustrative example that shows off several features of MkDocs and included Markdown extensions.","title":"fact User Guide"},{"location":"index.html#installation","text":"First, create and activate a Python virtual environment: Linux/macOS Windows python3 -m venv venv source venv/bin/activate py -m venv venv venv \\ Scripts \\ activate Then install the fact package: pip install .","title":"Installation"},{"location":"index.html#quick-start","text":"To use fact within your project, import the factorial function and execute it like: from fact.lib import factorial # (1) assert factorial ( 3 ) == 6 This assertion will be True Tip Within PyCharm, use Tab to auto-complete suggested imports while typing.","title":"Quick Start"},{"location":"reference/SUMMARY.html","text":"fact cli lib","title":"SUMMARY"},{"location":"reference/fact/__init__.html","text":"cli main ( n : int = Argument ( ... , min = 0 , help = \"The input n of fact(n)\" )) Compute factorial of a given input. Source code in fact/cli.py 10 11 12 13 14 15 16 17 def main ( n : int = Argument ( ... , min = 0 , help = \"The input n of fact(n)\" )) -> None : \"\"\"Compute factorial of a given input.\"\"\" colorama . init ( autoreset = True , strip = False ) print ( f \"fact( { colorama . Fore . CYAN }{ n }{ colorama . Fore . RESET } ) = \" f \" { colorama . Fore . GREEN }{ factorial ( n ) }{ colorama . Fore . RESET } \" ) lib InvalidFactorialError Bases: RuntimeError Error generated if an invalid factorial input is given. Source code in fact/lib.py 1 2 class InvalidFactorialError ( RuntimeError ): \"\"\"Error generated if an invalid factorial input is given.\"\"\" factorial ( n : int ) Computes the factorial through a recursive algorithm. Parameters: Name Type Description Default n int A positive input value. required Raises: Type Description InvalidFactorialError If n is less than 0. Returns: Type Description int Computed factorial. Source code in fact/lib.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def factorial ( n : int ) -> int : \"\"\"Computes the factorial through a recursive algorithm. Args: n: A positive input value. Raises: InvalidFactorialError: If n is less than 0. Returns: Computed factorial. \"\"\" if n < 0 : raise InvalidFactorialError ( f \"n is less than zero: { n } \" ) elif n == 0 : return 1 return n * factorial ( n - 1 )","title":"  init  "},{"location":"reference/fact/__init__.html#fact.cli","text":"","title":"cli"},{"location":"reference/fact/__init__.html#fact.cli.main","text":"Compute factorial of a given input. Source code in fact/cli.py 10 11 12 13 14 15 16 17 def main ( n : int = Argument ( ... , min = 0 , help = \"The input n of fact(n)\" )) -> None : \"\"\"Compute factorial of a given input.\"\"\" colorama . init ( autoreset = True , strip = False ) print ( f \"fact( { colorama . Fore . CYAN }{ n }{ colorama . Fore . RESET } ) = \" f \" { colorama . Fore . GREEN }{ factorial ( n ) }{ colorama . Fore . RESET } \" )","title":"main()"},{"location":"reference/fact/__init__.html#fact.lib","text":"","title":"lib"},{"location":"reference/fact/__init__.html#fact.lib.InvalidFactorialError","text":"Bases: RuntimeError Error generated if an invalid factorial input is given. Source code in fact/lib.py 1 2 class InvalidFactorialError ( RuntimeError ): \"\"\"Error generated if an invalid factorial input is given.\"\"\"","title":"InvalidFactorialError"},{"location":"reference/fact/__init__.html#fact.lib.factorial","text":"Computes the factorial through a recursive algorithm. Parameters: Name Type Description Default n int A positive input value. required Raises: Type Description InvalidFactorialError If n is less than 0. Returns: Type Description int Computed factorial. Source code in fact/lib.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def factorial ( n : int ) -> int : \"\"\"Computes the factorial through a recursive algorithm. Args: n: A positive input value. Raises: InvalidFactorialError: If n is less than 0. Returns: Computed factorial. \"\"\" if n < 0 : raise InvalidFactorialError ( f \"n is less than zero: { n } \" ) elif n == 0 : return 1 return n * factorial ( n - 1 )","title":"factorial()"},{"location":"reference/fact/cli.html","text":"main ( n : int = Argument ( ... , min = 0 , help = \"The input n of fact(n)\" )) Compute factorial of a given input. Source code in fact/cli.py 10 11 12 13 14 15 16 17 def main ( n : int = Argument ( ... , min = 0 , help = \"The input n of fact(n)\" )) -> None : \"\"\"Compute factorial of a given input.\"\"\" colorama . init ( autoreset = True , strip = False ) print ( f \"fact( { colorama . Fore . CYAN }{ n }{ colorama . Fore . RESET } ) = \" f \" { colorama . Fore . GREEN }{ factorial ( n ) }{ colorama . Fore . RESET } \" )","title":"cli"},{"location":"reference/fact/cli.html#fact.cli.main","text":"Compute factorial of a given input. Source code in fact/cli.py 10 11 12 13 14 15 16 17 def main ( n : int = Argument ( ... , min = 0 , help = \"The input n of fact(n)\" )) -> None : \"\"\"Compute factorial of a given input.\"\"\" colorama . init ( autoreset = True , strip = False ) print ( f \"fact( { colorama . Fore . CYAN }{ n }{ colorama . Fore . RESET } ) = \" f \" { colorama . Fore . GREEN }{ factorial ( n ) }{ colorama . Fore . RESET } \" )","title":"main()"},{"location":"reference/fact/lib.html","text":"InvalidFactorialError Bases: RuntimeError Error generated if an invalid factorial input is given. Source code in fact/lib.py 1 2 class InvalidFactorialError ( RuntimeError ): \"\"\"Error generated if an invalid factorial input is given.\"\"\" factorial ( n : int ) Computes the factorial through a recursive algorithm. Parameters: Name Type Description Default n int A positive input value. required Raises: Type Description InvalidFactorialError If n is less than 0. Returns: Type Description int Computed factorial. Source code in fact/lib.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def factorial ( n : int ) -> int : \"\"\"Computes the factorial through a recursive algorithm. Args: n: A positive input value. Raises: InvalidFactorialError: If n is less than 0. Returns: Computed factorial. \"\"\" if n < 0 : raise InvalidFactorialError ( f \"n is less than zero: { n } \" ) elif n == 0 : return 1 return n * factorial ( n - 1 )","title":"lib"},{"location":"reference/fact/lib.html#fact.lib.InvalidFactorialError","text":"Bases: RuntimeError Error generated if an invalid factorial input is given. Source code in fact/lib.py 1 2 class InvalidFactorialError ( RuntimeError ): \"\"\"Error generated if an invalid factorial input is given.\"\"\"","title":"InvalidFactorialError"},{"location":"reference/fact/lib.html#fact.lib.factorial","text":"Computes the factorial through a recursive algorithm. Parameters: Name Type Description Default n int A positive input value. required Raises: Type Description InvalidFactorialError If n is less than 0. Returns: Type Description int Computed factorial. Source code in fact/lib.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def factorial ( n : int ) -> int : \"\"\"Computes the factorial through a recursive algorithm. Args: n: A positive input value. Raises: InvalidFactorialError: If n is less than 0. Returns: Computed factorial. \"\"\" if n < 0 : raise InvalidFactorialError ( f \"n is less than zero: { n } \" ) elif n == 0 : return 1 return n * factorial ( n - 1 )","title":"factorial()"}]}